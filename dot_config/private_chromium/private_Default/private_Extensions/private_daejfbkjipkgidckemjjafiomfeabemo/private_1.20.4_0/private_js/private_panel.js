// Generated by CoffeeScript 1.12.7

/**
@license Copyright (C) 2012 Observepoint LLC. All rights reserved.
 */
var addTag, addVariables, background, blankTagRowTemplate, clearOnNavigate, connId, getClearOnNavigate, newDownload, openSidePanel, removeDuplicates, requestTemplate, rowDownload, setClearOnNavigate, tagTemplate, toggleRow, uniqueTagTypes, updateAverageLoadTime, updateRequestData, updateTag, variableTemplate;

connId = chrome.devtools.inspectedWindow.tabId;

background = chrome.extension.connect({
  name: 'observepoint-' + connId
});

background.postMessage({
  action: 'setTabMap',
  tabId: chrome.devtools.inspectedWindow.tabId
});

background.postMessage({
  action: 'analytics',
  tabId: chrome.devtools.inspectedWindow.tabId
});

background.onMessage.addListener(function(msg) {
  if (msg.action === 'addTag') {
    addTag(msg.data, false);
  }
  if (msg.action === 'updateTag') {
    addTag(msg.data, true);
  }
  if (msg.action === 'addVariables') {
    addVariables(msg.data);
  }
  if (msg.action === 'updateAverageLoadTime') {
    updateAverageLoadTime();
  }
  if (msg.action === 'downloadFile') {
    return downloadFile(msg.data);
  }
});

clearOnNavigate = true;

setClearOnNavigate = function(clear) {
  return clearOnNavigate = clear;
};

getClearOnNavigate = function() {
  return clearOnNavigate;
};

chrome.devtools.network.onNavigated.addListener(function(url) {
  clearContent(url);
  if (!clearOnNavigate) {
    background.postMessage({
      action: 'clearRequests',
      tags: false
    });
  }
  return background.postMessage({
    action: 'analytics',
    url: url,
    tabId: chrome.devtools.inspectedWindow.tabId
  });
});

requestTemplate = Handlebars.templates['request_data.tmpl'];

tagTemplate = Handlebars.templates['tag_row.tmpl'];

variableTemplate = Handlebars.templates['variable_data.tmpl'];

blankTagRowTemplate = Handlebars.templates['blank_tag_row.tmpl'];

addTag = function(tag, replace) {
  var context, filterCategory, filterName, html, tagPath;
  if (tag.statusCode === -1) {
    tag.statusCode = "Pending";
  }
  context = {
    tag: tag
  };
  html = tagTemplate(context);
  if (replace) {
    updateTag(tag);
  } else {
    $('#observepoint-tag-rows').prepend($(html).hide().fadeIn('fast'));
    $("#total-tags").html($("#observepoint-tag-rows .observepoint-analytics-tag").size());
    $("#total-tag-types").html("" + uniqueTagTypes().length);
  }
  filterName = $("#filter_name").val().trim();
  if (filterName && 0 < filterName.length) {
    tagPath = tag.name.concat(tag.trimmedUrl);
    if (!tagPath.toLowerCase().match(filterName.toLowerCase())) {
      $("#" + tag.uniqueId + "-tag-row").hide();
    }
  }
  filterCategory = $("#filter_category").val().trim();
  if (filterCategory && 0 < filterCategory.length) {
    if (!tag.category.toLowerCase().match(filterCategory.toLowerCase())) {
      $("#" + tag.uniqueId + "-tag-row").hide();
    }
  }
  return $("#" + tag.uniqueId + "-tag-row:not(.bound)").addClass('bound').bind('click', function(event) {
    toggleRow($(this));
    updateRequestData(tag);
    background.postMessage({
      action: 'getTagVariables',
      id: tag.uniqueId
    });
    return true;
  });
};

updateTag = function(tag) {
  var row, status, time;
  row = $("#" + tag.uniqueId + "-tag-row");
  status = row.find($(".status-code"));
  status.attr('title', tag.statusText);
  status.children('span').html(tag.statusCode);
  row.find($(".status-text")).html(tag.statusText);
  time = row.find($(".time"));
  time.attr('title', tag.time);
  time.children('span').html(tag.time);
  row.find($(".latency")).html(tag.latency);
  row.find($(".request-size")).html(tag.requestSize);
  return row.find($(".content-size")).html(tag.contentSize);
};

updateRequestData = function(tag) {
  var context, html;
  context = {
    actualRequest: tag.url,
    decodedRequest: decodeURIComponent(tag.url),
    postData: tag.requestBody
  };
  html = requestTemplate(context);
  return $("#request-data").html(html);
};

updateAverageLoadTime = function() {
  var count, result;
  result = 0;
  count = 0;
  $(".timevalue").each(function() {
    result += parseInt($(this).text().replace("ms", ""));
    return count++;
  });
  return $("#average-load-time").html(String(result / count).slice(0, 5));
};

uniqueTagTypes = function() {
  var types;
  types = Object.create(null);
  $("#observepoint-tag-rows .icon img").each(function() {
    var $this, type;
    $this = $(this);
    if (/tag-/.test($this.attr("class"))) {
      type = $(this).attr("class").split(' ')[1].split('-')[1];
      return types[type] = true;
    }
  });
  return Object.keys(types);
};

addVariables = function(variables) {
  var context, e, html, i, item, j, len, len1, ref, results, variable;
  if (variables !== void 0 && variables !== null) {
    $("#variable-data").html("");
    results = [];
    for (i = 0, len = variables.length; i < len; i++) {
      item = variables[i];
      ref = item.variables;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        variable = ref[j];
        try {
          variable.value = decodeURIComponent(variable.value);
        } catch (error) {
          e = error;
        }
      }
      context = {
        category: item.category,
        variables: item.variables,
        size: item.variables.length
      };
      html = variableTemplate(context);
      results.push($("#variable-data").append(html));
    }
    return results;
  } else {
    return $("#variable-data").html("No variables available");
  }
};

toggleRow = function(row) {
  if (row.hasClass('active_row')) {
    resetColumns();
    return row.removeClass('active_row');
  } else {
    $('.observepoint-analytics-tag').removeClass('active_row');
    openSidePanel();
    return row.addClass('active_row');
  }
};

this.switchTheme = function(theme) {
  return $('body').addClass(theme);
};

this.clearContent = function(url) {
  var context, html;
  resetColumns();
  $("#variable-data").html("");
  $(".observepoint-analytics-tag").remove();
  $(".blank-tag-row").remove();
  $("#total-tags").html("0");
  $("#total-tag-types").html("0");
  $("#average-load-time").html("0");
  background.postMessage({
    action: 'clearRequests',
    tags: true
  });
  context = {
    url: url
  };
  html = blankTagRowTemplate(context);
  return $('#observepoint-tag-rows').prepend(html);
};

this.clearContentDefault = this.clearContent;

this.clearContentOff = function(url) {
  var context, html;
  context = {
    url: url
  };
  html = blankTagRowTemplate(context);
  return $('#observepoint-tag-rows').prepend(html);
};

openSidePanel = function() {
  $("#sidepanel_main").show();
  $(".corner").hide();
  $("#main_area_data_container").css('width', '50%');
  $("#main_area_data_container").css('padding-right', '0px');
  $("#main_area_header").css('width', '50%');
  $(".tag-name-col").css('width', '100%');
  $(".can-min").css('width', '0%');
  return $("#main_area_header th:not(.name-column)").hide();
};

this.resetColumns = function() {
  $("#sidepanel_main").hide();
  $(".corner").show();
  $('.observepoint-analytics-tag').removeClass('active_row');
  $("#main_area_data_container").css('width', '100%');
  $("#main_area_data_container").css('padding-right', '14px');
  $("#main_area_header").css('width', '100%');
  $(".tag-name-col").css('width', '30%');
  $(".can-min").css('width', '12%');
  return $("#main_area_header th").show();
};

this.filterSearch = function(filterType, query) {
  return $("#observepoint-tag-rows .observepoint-analytics-tag").each(function() {
    var _this;
    _this = $(this);
    if (!_this.find(".tag-" + filterType).text().toLowerCase().match(query.toLowerCase())) {
      return _this.hide();
    }
  });
};

this.clearSearch = function() {
  return $("#observepoint-tag-rows .observepoint-analytics-tag").show();
};

this.applySearch = function() {
  clearSearch();
  return $("input.filter").each(function() {
    var _this, value;
    _this = $(this);
    value = _this.val().trim();
    if (value && 0 < value.length) {
      return filterSearch(_this.data('filterType'), value);
    }
  });
};

removeDuplicates = function(ar) {
  var i, key, ref, res, results, value;
  if (ar.length === 0) {
    return [];
  }
  res = {};
  for (key = i = 0, ref = ar.length - 1; 0 <= ref ? i <= ref : i >= ref; key = 0 <= ref ? ++i : --i) {
    res[ar[key]] = ar[key];
  }
  results = [];
  for (key in res) {
    value = res[key];
    results.push(value);
  }
  return results;
};

rowDownload = function() {
  var data;
  $("#total-tags").html($("#observepoint-tag-rows .observepoint-analytics-tag").size());
  data = "Total Tags\t" + $("#total-tags").html() + "\n";
  data += "Tag Types\t" + $("#total-tag-types").html() + "\n";
  data += "Average Tag Load Time\t" + $("#average-load-time").html() + "\n\n";
  data += "URL\tTag Name\tAccount\tCategory\tStatus\tRequest Size\tLoad Time\t\n";
  $("#observepoint-tag-rows .observepoint-analytics-tag").each(function() {
    var _this;
    _this = $(this);
    data += _this.nextAll('.blank-tag-row').first().find('.blank-row-url').text() + "\t";
    data += _this.find('.tag-name').text() + "\t";
    data += _this.find('.tag-account').text() + "\t";
    data += _this.find('.tag-category').text() + "\t";
    data += _this.find('.status-code span').text() + "\t";
    data += _this.find('.request-size').text() + "\t";
    return data += _this.find('.timevalue').text() + "\t\n";
  });
  return data;
};

newDownload = function() {
  var tagData;
  tagData = [];
  $("#observepoint-tag-rows .observepoint-analytics-tag").each(function() {
    var _this, uniqueId;
    _this = $(this);
    uniqueId = _this.attr("id").split("-tag-row")[0];
    return tagData.push({
      uniqueId: uniqueId,
      url: _this.nextAll('.blank-tag-row').first().find('.blank-row-url').text(),
      name: _this.find('.tag-name').text(),
      account: _this.find('.tag-account').text(),
      category: _this.find('.tag-category').text(),
      statusCode: _this.find('.status-code span').text(),
      requestSize: _this.find('.request-size').text(),
      timeValue: _this.find('.timevalue').text()
    });
  });
  return background.postMessage({
    action: 'download',
    tagData: tagData
  });
};

this.downloadFile = function(data) {
  var category, csvData, csvUrl, downloadData, fn, fn1, fn2, i, index, j, k, key, l, len, len1, len2, len3, len4, len5, len6, m, n, o, pageData, ref, ref1, tag, url, value, varData, variableArray, variableData, variableName, variableValue;
  downloadData = "";
  downloadData += "ObservePoint Chrome Extension Export\n";
  downloadData += "Exported on " + new Date + "\n";
  downloadData += "\n";
  pageData = [];
  varData = {};
  fn = function(tag) {
    varData[tag.tagData.name] = varData[tag.tagData.name] || ["Tag Name", "URL", "Account", "Category", "Status Code", "Request Size", "Load Time"];
    return pageData.push(tag.tagData.url);
  };
  for (i = 0, len = data.length; i < len; i++) {
    tag = data[i];
    fn(tag);
    if (tag.variableData != null) {
      ref = tag.variableData;
      fn1 = function(category) {
        var k, len2, ref1, results, variable;
        ref1 = category.variables;
        results = [];
        for (k = 0, len2 = ref1.length; k < len2; k++) {
          variable = ref1[k];
          varData[tag.tagData.name].push(variable.variable);
          results.push(varData[tag.tagData.name] = removeDuplicates(varData[tag.tagData.name]));
        }
        return results;
      };
      for (j = 0, len1 = ref.length; j < len1; j++) {
        category = ref[j];
        fn1(category);
      }
    }
  }
  pageData = removeDuplicates(pageData);
  downloadData += "Pages Viewed\n";
  for (k = 0, len2 = pageData.length; k < len2; k++) {
    url = pageData[k];
    downloadData += url + "\n";
  }
  downloadData += "\n";
  downloadData += "Tag Data";
  downloadData += "\n";
  for (key in varData) {
    value = varData[key];
    downloadData += "\n";
    for (l = 0, len3 = value.length; l < len3; l++) {
      variableName = value[l];
      downloadData += variableName + "\t";
    }
    downloadData += "\n";
    for (m = 0, len4 = data.length; m < len4; m++) {
      tag = data[m];
      variableArray = [];
      index = 0;
      variableArray = new Array(value.length + 7);
      if (tag.tagData.name === key) {
        variableData = "";
        variableArray.splice(value.indexOf("Tag Name"), 1, tag.tagData.name);
        variableArray.splice(value.indexOf("URL"), 1, tag.tagData.url);
        variableArray.splice(value.indexOf("Account"), 1, tag.tagData.account);
        variableArray.splice(value.indexOf("Category"), 1, tag.tagData.category);
        variableArray.splice(value.indexOf("Status Code"), 1, tag.tagData.statusCode);
        variableArray.splice(value.indexOf("Request Size"), 1, tag.tagData.requestSize);
        variableArray.splice(value.indexOf("Load Time"), 1, tag.tagData.timeValue);
        if (tag.variableData != null) {
          ref1 = tag.variableData;
          fn2 = function(category) {
            var len6, o, ref2, results, variable;
            ref2 = category.variables;
            results = [];
            for (o = 0, len6 = ref2.length; o < len6; o++) {
              variable = ref2[o];
              results.push((function(variable) {
                index = value.indexOf(variable.variable);
                return variableArray.splice(index, 1, variable.value);
              })(variable));
            }
            return results;
          };
          for (n = 0, len5 = ref1.length; n < len5; n++) {
            category = ref1[n];
            fn2(category);
          }
        }
        for (o = 0, len6 = variableArray.length; o < len6; o++) {
          variableValue = variableArray[o];
          if (variableValue) {
            downloadData += decodeURIComponent(variableValue) + "\t";
          } else {
            downloadData += "\t";
          }
        }
        downloadData += "\n";
      }
    }
  }
  csvData = new Blob([downloadData], {
    type: 'text/csv'
  });
  csvUrl = URL.createObjectURL(csvData);
  return background.postMessage({
    action: 'realDownload',
    url: csvUrl,
    myVariableData: varData,
    tabId: chrome.devtools.inspectedWindow.tabId
  });
};

this.exportContent = function() {
  return newDownload();
};
