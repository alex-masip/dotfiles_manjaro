// Generated by CoffeeScript 1.12.7

/**
@license Copyright (C) 2012 Observepoint LLC. All rights reserved.
 */
var ArrayBufferToString, NetRequest, formatSize, formatTime;

NetRequest = (function() {
  NetRequest.getId = function(id, url) {
    return id + '-' + url.hashCode();
  };

  function NetRequest(details) {
    this.uniqueId = NetRequest.getId(details.requestId, details.url);
    this.requestId = details.requestId;
    this.tabId = details.tabId;
    this.url = details.url;
    this.headersSent = -1;
    this.headersReceived = -1;
    this.responseStarted = -1;
    this.responseCompleted = -1;
    this.latency = 0;
    this.time = 0;
    this.statusCode = 0;
    this.statusText = '';
    this.requestMethod = '';
    this.contentSize = 0;
    this.requestSize = 0;
    this.cancelled = false;
    this.cached = false;
    this.requestBody = '';
    this.initiator = {
      file: "test-initiator-file",
      type: "test-initiator-type"
    };
    this.setRequestBody(details);
    this.name = '';
    this.tag_id = 0;
    this.trimmed_url = details.url;
    this.account = '';
    this.category = '';
    this.version = '';
    this.variables = [];
  }

  NetRequest.prototype.onSendHeaders = function(details) {
    var i, len, pair, ref, requestSize;
    this.headersSent = details.timeStamp;
    this.requestMethod = details.method;
    requestSize = this.requestBody.length;
    ref = details.requestHeaders;
    for (i = 0, len = ref.length; i < len; i++) {
      pair = ref[i];
      requestSize += pair.name.length + pair.value.length;
    }
    return this.requestSize = formatSize(requestSize);
  };

  NetRequest.prototype.onHeadersReceived = function(details) {
    this.headersReceived = details.timeStamp;
    this.latency = formatTime(this.headersReceived - this.headersSent);
    return this.statusText = details.statusLine;
  };

  NetRequest.prototype.onAuthRequired = function(details) {
    this.statusLine = details.statusLine;
    this.statusCode = details.statusCode;
    this.responseCompleted = details.timeStamp;
    return this.time = formatTime(this.responseCompleted - this.headersSent);
  };

  NetRequest.prototype.onBeforeRedirect = function(details) {
    this.cached = details.fromCache;
    this.statusCode = details.statusCode;
    this.statusText = details.statusLine;
    this.responseCompleted = details.timeStamp;
    return this.time = formatTime(this.responseCompleted - this.headersSent);
  };

  NetRequest.prototype.onResponseStarted = function(details) {
    this.cached = details.fromCache;
    this.responseStarted = details.timeStamp;
    this.requestMethod = details.method;
    this.statusCode = details.statusCode;
    return this.statusLine = details.statusLine;
  };

  NetRequest.prototype.onCompleted = function(details) {
    var i, len, pair, ref, results;
    this.cached = details.fromCache;
    this.responseCompleted = details.timeStamp;
    this.requestMethod = details.method;
    this.statusCode = details.statusCode;
    this.statusText = details.statusLine;
    this.time = formatTime(this.responseCompleted - this.headersSent);
    ref = details.responseHeaders;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      pair = ref[i];
      if (pair.name === 'Content-Length') {
        results.push(this.contentSize = formatSize(pair.value));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  NetRequest.prototype.setRequestBody = function(details) {
    if (details.requestBody) {
      if (details.requestBody.formData) {
        this.requestBody = details.requestBody.formData;
      }
      if (details.requestBody.raw) {
        this.requestBody = details.requestBody.raw.map(function(b) {
          return ArrayBufferToString(b.bytes);
        }).join('');
      }
      if (details.requestBody.error) {
        return this.requestBody = details.requestBody.error;
      }
    }
  };

  NetRequest.prototype.setTagData = function(data) {
    this.name = data.name;
    this.account = data.account;
    this.category = data.category;
    this.variables = data.variables;
    this.tag_id = data.id;
    this.trimmedUrl = this.url.replace(/^https?:\/\//, "");
    if (/\?/.test(this.trimmedUrl)) {
      return this.trimmedUrl = this.trimmedUrl.slice(0, this.trimmedUrl.indexOf("?"));
    }
  };

  return NetRequest;

})();

ArrayBufferToString = function(buf) {
  return String.fromCharCode.apply(null, new Uint8Array(buf));
};

formatTime = function(time) {
  time = Math.round(time);
  if (time === -1) {
    return '';
  } else if (time < 1000) {
    return time + "ms";
  } else {
    time = time / 1000;
    return time + "s";
  }
};

formatSize = function(size) {
  return size + "B";
};
