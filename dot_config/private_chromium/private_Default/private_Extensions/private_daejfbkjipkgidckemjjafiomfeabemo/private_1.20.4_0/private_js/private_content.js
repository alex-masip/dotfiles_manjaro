// Generated by CoffeeScript 1.12.7
var OPDataLayer;

String.prototype.hashCode = function() {
  var char_, hash, i, index, len, ref;
  hash = 0;
  if (this.length === 0) {
    return hash;
  }
  ref = this.split('');
  for (index = i = 0, len = ref.length; i < len; index = ++i) {
    char_ = ref[index];
    char_ = this.charCodeAt(index);
    hash = ((hash << 5) - hash) + char_;
    hash = hash & hash;
  }
  return Math.abs(hash);
};

OPDataLayer = (function() {
  OPDataLayer.prototype.tryNumber = 0;

  function OPDataLayer(name) {
    this.name = name;
  }


  /**
   * Parse the DataLayer and send addTag message to `js/inject.js`
   * If it's not found should retry 5 times in 5s otherwise log error and return
   * Check if the DataLayer is changed or not every `1s`
   * If changed send updateTag message to `js/inject.js` with the new object
   *
   * @param {type} name The DataLayer name
   */

  OPDataLayer.prototype.handle = function() {
    var _self, data, dataLayer, e, parsedDataLayer, timer;
    try {
      dataLayer = eval("window.".concat(this.name));
      parsedDataLayer = this.parse(dataLayer);
    } catch (error) {
      e = error;
      if (this.tryNumber < 5) {
        setTimeout(this.handle.bind(this), 1000, this.name);
      } else {
        console.warn("Can't parse data layer ".concat(this.name, ": ".concat(e.message)));
      }
      this.tryNumber++;
      return;
    }
    data = this.build(parsedDataLayer);
    this.send('add', data);
    _self = this;
    timer = setInterval((function() {
      var obj;
      try {
        dataLayer = eval("window.".concat(_self.name));
        obj = _self.parse(dataLayer);
        if (JSON.stringify(obj) !== JSON.stringify(parsedDataLayer)) {
          parsedDataLayer = obj;
          data = _self.build(parsedDataLayer);
          return _self.send('update', data);
        }
      } catch (error) {
        return clearInterval(timer);
      }
    }), 1000);
  };


  /**
   * Parse an object and return an array of variables
   * Format: [{variable: xxx, value: xxx}] to be used in the UI
   *
   * @param {type} dataLayer The DataLayer object
   */

  OPDataLayer.prototype.parse = function(dataLayer) {
    var cache, i, key, len, obj, parsedData, parsedDataLayer;
    cache = [];
    parsedDataLayer = [];
    if (typeof dataLayer === 'function') {
      parsedData = JSON.parse(JSON.stringify(dataLayer(), function(key, value) {
        if (typeof value === 'object' && value !== null) {
          if (cache.indexOf(value) !== -1) {
            return;
          }
          cache.push(value);
        }
        return value;
      }));
    } else {
      parsedData = JSON.parse(JSON.stringify(dataLayer, function(key, value) {
        if (typeof value === 'object' && value !== null) {
          if (cache.indexOf(value) !== -1) {
            return;
          }
          cache.push(value);
        }
        return value;
      }));
    }
    if (this._isArray(parsedData)) {
      for (key = i = 0, len = parsedData.length; i < len; key = ++i) {
        obj = parsedData[key];
        if (typeof obj === 'string') {
          parsedDataLayer = parsedDataLayer.concat(this._parseString(obj, key));
        } else {
          parsedDataLayer = parsedDataLayer.concat(this._parseObject(obj, key));
        }
      }
    } else {
      parsedDataLayer = this._parseObject(parsedData);
    }
    return parsedDataLayer;
  };


  /**
   * Build the DataLayer data with predefined values
   *
   * @param {type} variables The DataLayer variables
   */

  OPDataLayer.prototype.build = function(variables) {
    var data;
    if (variables === null) {
      variables = [];
    }
    data = {};
    data.tag = 211;
    data.name = "Data Layer";
    data.url = "generated_tag/data_layer/".concat(this.name);
    data.account = this.name;
    data.category = "Tag Management";
    data.statusCode = 200;
    data.requestSize = JSON.stringify(variables).length;
    data.timeStamp = 0;
    data.responseHeaders = [];
    data.variables = [
      {
        category: "Variables",
        variables: variables
      }
    ];
    return data;
  };


  /**
   * Send message to `js/inject.js`
   *
   * @param {type} action The action type `add` or `update` the DataLayer
   * @param {type} data The DataLayer data
   */

  OPDataLayer.prototype.send = function(action, data) {
    return window.parent.postMessage({
      type: "dataLayer",
      action: action,
      data: JSON.stringify(data)
    });
  };

  OPDataLayer.prototype._parseObject = function(object, key) {
    var parsedObject, value, variable;
    if (key == null) {
      key = null;
    }
    parsedObject = [];
    for (variable in object) {
      value = object[variable];
      parsedObject.push({
        variable: key !== null ? key.toString().concat(".", variable) : variable,
        value: typeof value === 'object' ? JSON.stringify(value) : value
      });
    }
    return parsedObject;
  };

  OPDataLayer.prototype._parseString = function(str, key) {
    return [
      {
        variable: key,
        value: str
      }
    ];
  };

  OPDataLayer.prototype._isArray = Array.isArray || function(value) {
    return {}.toString.call(value) === '[object Array]';
  };

  return OPDataLayer;

})();
